// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/security.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Security.API {
  /// <summary>
  /// 
  //// Crypto service
  /// </summary>
  public static partial class CryptoService
  {
    static readonly string __ServiceName = "security.CryptoService";

    static readonly grpc::Marshaller<global::Security.API.HashRequest> __Marshaller_HashRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.HashRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.HashResponse> __Marshaller_HashResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.HashResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.VerifyHashRequest> __Marshaller_VerifyHashRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.VerifyHashRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.VerifyHashResponse> __Marshaller_VerifyHashResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.VerifyHashResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Security.API.HashRequest, global::Security.API.HashResponse> __Method_CreateHash = new grpc::Method<global::Security.API.HashRequest, global::Security.API.HashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateHash",
        __Marshaller_HashRequest,
        __Marshaller_HashResponse);

    static readonly grpc::Method<global::Security.API.VerifyHashRequest, global::Security.API.VerifyHashResponse> __Method_VerifyHash = new grpc::Method<global::Security.API.VerifyHashRequest, global::Security.API.VerifyHashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyHash",
        __Marshaller_VerifyHashRequest,
        __Marshaller_VerifyHashResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Security.API.SecurityReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CryptoService</summary>
    public abstract partial class CryptoServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Security.API.HashResponse> CreateHash(global::Security.API.HashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Security.API.VerifyHashResponse> VerifyHash(global::Security.API.VerifyHashRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CryptoService</summary>
    public partial class CryptoServiceClient : grpc::ClientBase<CryptoServiceClient>
    {
      /// <summary>Creates a new client for CryptoService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CryptoServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CryptoService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CryptoServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CryptoServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CryptoServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Security.API.HashResponse CreateHash(global::Security.API.HashRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Security.API.HashResponse CreateHash(global::Security.API.HashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateHash, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.HashResponse> CreateHashAsync(global::Security.API.HashRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return CreateHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.HashResponse> CreateHashAsync(global::Security.API.HashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateHash, null, options, request);
      }
      public virtual global::Security.API.VerifyHashResponse VerifyHash(global::Security.API.VerifyHashRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyHash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Security.API.VerifyHashResponse VerifyHash(global::Security.API.VerifyHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyHash, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.VerifyHashResponse> VerifyHashAsync(global::Security.API.VerifyHashRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return VerifyHashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.VerifyHashResponse> VerifyHashAsync(global::Security.API.VerifyHashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyHash, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CryptoServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CryptoServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CryptoServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateHash, serviceImpl.CreateHash)
          .AddMethod(__Method_VerifyHash, serviceImpl.VerifyHash).Build();
    }

  }
  public static partial class TokenService
  {
    static readonly string __ServiceName = "security.TokenService";

    static readonly grpc::Marshaller<global::Security.API.TokenGenerationRequest> __Marshaller_TokenGenerationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.TokenGenerationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.TokenGenerationResponse> __Marshaller_TokenGenerationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.TokenGenerationResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.TokenValidationRequest> __Marshaller_TokenValidationRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.TokenValidationRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.TokenValidationResponse> __Marshaller_TokenValidationResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.TokenValidationResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Security.API.TokenGenerationRequest, global::Security.API.TokenGenerationResponse> __Method_GenerateToken = new grpc::Method<global::Security.API.TokenGenerationRequest, global::Security.API.TokenGenerationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateToken",
        __Marshaller_TokenGenerationRequest,
        __Marshaller_TokenGenerationResponse);

    static readonly grpc::Method<global::Security.API.TokenValidationRequest, global::Security.API.TokenValidationResponse> __Method_ValidateToken = new grpc::Method<global::Security.API.TokenValidationRequest, global::Security.API.TokenValidationResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateToken",
        __Marshaller_TokenValidationRequest,
        __Marshaller_TokenValidationResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Security.API.SecurityReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of TokenService</summary>
    public abstract partial class TokenServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Security.API.TokenGenerationResponse> GenerateToken(global::Security.API.TokenGenerationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Security.API.TokenValidationResponse> ValidateToken(global::Security.API.TokenValidationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for TokenService</summary>
    public partial class TokenServiceClient : grpc::ClientBase<TokenServiceClient>
    {
      /// <summary>Creates a new client for TokenService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public TokenServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for TokenService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public TokenServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected TokenServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected TokenServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Security.API.TokenGenerationResponse GenerateToken(global::Security.API.TokenGenerationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GenerateToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Security.API.TokenGenerationResponse GenerateToken(global::Security.API.TokenGenerationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateToken, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.TokenGenerationResponse> GenerateTokenAsync(global::Security.API.TokenGenerationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GenerateTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.TokenGenerationResponse> GenerateTokenAsync(global::Security.API.TokenGenerationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateToken, null, options, request);
      }
      public virtual global::Security.API.TokenValidationResponse ValidateToken(global::Security.API.TokenValidationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ValidateToken(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Security.API.TokenValidationResponse ValidateToken(global::Security.API.TokenValidationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateToken, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.TokenValidationResponse> ValidateTokenAsync(global::Security.API.TokenValidationRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ValidateTokenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.TokenValidationResponse> ValidateTokenAsync(global::Security.API.TokenValidationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateToken, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override TokenServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TokenServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(TokenServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GenerateToken, serviceImpl.GenerateToken)
          .AddMethod(__Method_ValidateToken, serviceImpl.ValidateToken).Build();
    }

  }
  public static partial class UserService
  {
    static readonly string __ServiceName = "security.UserService";

    static readonly grpc::Marshaller<global::Security.API.GetUsersRequest> __Marshaller_GetUsersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.GetUsersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.GetUsersResponse> __Marshaller_GetUsersResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.GetUsersResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.AddUserRequest> __Marshaller_AddUserRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.AddUserRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Security.API.AddUserResponse> __Marshaller_AddUserResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Security.API.AddUserResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Security.API.GetUsersRequest, global::Security.API.GetUsersResponse> __Method_GetUsers = new grpc::Method<global::Security.API.GetUsersRequest, global::Security.API.GetUsersResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUsers",
        __Marshaller_GetUsersRequest,
        __Marshaller_GetUsersResponse);

    static readonly grpc::Method<global::Security.API.AddUserRequest, global::Security.API.AddUserResponse> __Method_AddUser = new grpc::Method<global::Security.API.AddUserRequest, global::Security.API.AddUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddUser",
        __Marshaller_AddUserRequest,
        __Marshaller_AddUserResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Security.API.SecurityReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of UserService</summary>
    public abstract partial class UserServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Security.API.GetUsersResponse> GetUsers(global::Security.API.GetUsersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Security.API.AddUserResponse> AddUser(global::Security.API.AddUserRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for UserService</summary>
    public partial class UserServiceClient : grpc::ClientBase<UserServiceClient>
    {
      /// <summary>Creates a new client for UserService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for UserService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Security.API.GetUsersResponse GetUsers(global::Security.API.GetUsersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetUsers(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Security.API.GetUsersResponse GetUsers(global::Security.API.GetUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUsers, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.GetUsersResponse> GetUsersAsync(global::Security.API.GetUsersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetUsersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.GetUsersResponse> GetUsersAsync(global::Security.API.GetUsersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUsers, null, options, request);
      }
      public virtual global::Security.API.AddUserResponse AddUser(global::Security.API.AddUserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddUser(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Security.API.AddUserResponse AddUser(global::Security.API.AddUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddUser, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.AddUserResponse> AddUserAsync(global::Security.API.AddUserRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddUserAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Security.API.AddUserResponse> AddUserAsync(global::Security.API.AddUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddUser, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetUsers, serviceImpl.GetUsers)
          .AddMethod(__Method_AddUser, serviceImpl.AddUser).Build();
    }

  }
}
#endregion
